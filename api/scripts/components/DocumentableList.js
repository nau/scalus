class DocumentableList extends Component{constructor(t){super(t),this.refs={tabs:findRefs(".names .tab[data-togglable]",findRef(".membersList")).concat(findRefs(".contents h2[data-togglable]",findRef(".membersList"))),sections:findRefs(".contents .tab[data-togglable]",findRef(".membersList"))},this.state={list:new List(this.refs.tabs,this.refs.sections)},this.render(this.props)}toggleElementDatasetVisibility(t,e){e.dataset.visibility=t}toggleDisplayStyles(t,e){e.style.display=t?null:"none"}render({filter:t}){this.state.list.sectionsRefs.map((e=>{const s=this.state.list.getSectionListRefs(e).filter((e=>{const s=this.state.list.getSectionListElementsRefs(e).map((t=>this.state.list.toListElement(t))).filter((e=>{const s=this.state.list.isElementVisible(e,t);return this.toggleDisplayStyles(s,e.ref),this.toggleElementDatasetVisibility(s,e.ref),s})).length;return findRefs("span.groupHeader",e).forEach((e=>{const s=0!=this.state.list.getSectionListElementsRefs(e.parentNode).map((t=>this.state.list.toListElement(t))).filter((e=>this.state.list.isElementVisible(e,t)));this.toggleDisplayStyles(s,e)})),this.toggleDisplayStyles(s,e),s})).length,i=this;this.state.list.getTabRefFromSectionRef(e).forEach((function(t){i.toggleDisplayStyles(s,t)}))}))}}class List{constructor(t,e){this._tabsRef=t,this._sectionRefs=e}get tabsRefs(){return this._tabsRef.filter((t=>this.filterTab(this._getTogglable(t))))}get sectionsRefs(){return this._sectionRefs.filter((t=>this.filterTab(this._getTogglable(t))))}filterTab(t){return"Linear supertypes"!==t&&"Known subtypes"!==t&&"Type hierarchy"!==t}getTabRefFromSectionRef(t){return this.tabsRefs.filter((e=>this._getTogglable(e)===this._getTogglable(t)))}getSectionListRefs(t){return findRefs(".documentableList",t)}getSectionListElementsRefs(t){return findRefs(".documentableElement",t)}toListElement(t){return{ref:t,name:getElementTextContent(getElementNameRef(t)),description:getElementTextContent(getElementDescription(t))}}isElementVisible(t,e){return!!function(){const s=Object.entries(t.ref.dataset),i=Object.entries(Filter.defaultFilters).filter((([t])=>!!e.filters[getFilterKey(t)])),n=i.reduce(((t,[e,i])=>{const n=getFilterKey(e);return!s.some((([t])=>t===n))?[...t,[n,i]]:t}),[]),l=s.filter((([t])=>isFilterData(t))).map((([t,e])=>{const s=i.find((([e])=>e===t));return s?[t,`${e},${s[1]}`]:[t,e]})),r=[...n,...l];return r.every((([t,s])=>{const i=e.filters[t];return 0==Object.entries(i).filter((t=>t[1].selected)).length||s.split(",").some((t=>i&&i[t].selected))}))}()&&function(){const s=e.value.toLowerCase();return t.name.toLowerCase().includes(s)||t.description.toLowerCase().includes(s)}()}_getTogglable=t=>t.dataset.togglable}