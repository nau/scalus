function highlightDotty(e){const n=/[a-zA-Z$_][$\w]*/,a=/[^\s\w\d,;"'()[\]{}]/,i=new RegExp(`(${`[a-zA-Z$][a-zA-Z0-9$]*_${a.source}`}|${n.source}|${a.source}{2,}|${/[^\s\w\d,;"'()[\]{}=:]/.source}+|\`.+?\`)`),s="[a-fA-F0-9]",t="0|([1-9]((\\d|_)*\\d)?)",d="[eE][+-]?\\d((\\d|_)*\\d)?",r=new RegExp(`(${`0[xX]${s}((${s}|_)*${s}+)?`}|${`(${t})?\\.\\d((\\d|_)*\\d)?${d}[fFdD]?`}|${`${t}${d}[fFdD]?`}|(${t}[lLfFdD]?))`),c={$pattern:/(\w+|\?=>|\?{1,3}|=>>|=>|<:|>:|_|#|<-|\.nn)/,keyword:"abstract case catch class def do else enum export extends final finally for given if implicit import lazy match new object package private protected override return sealed then throw trait true try type val var while with yield =>> => ?=> <: >: _ ? <- #",literal:"true false null this super",built_in:"??? asInstanceOf isInstanceOf assert implicitly locally summon valueOf .nn"},l="abstract|final|implicit|override|private|protected|sealed";function _(e){return{$pattern:c.$pattern,keyword:e+" "+c.keyword,literal:c.literal,built_in:c.built_in}}const o={className:"title",begin:i,returnEnd:!0,keywords:c.keyword,literal:c.literal,built_in:c.built_in},E={className:"title",begin:i,excludeEnd:!0,endsWithParent:!0},M={begin:/: (?=[a-zA-Z()?])/,end:/\/\/|\/\*|\n/,endsWithParent:!0,returnEnd:!0,contains:[{className:"keyword",begin:/\?\=>|=>>|[=:][><]|\?/},{className:"type",begin:n}]},g={className:"type",begin:/\b[A-Z][$\w]*\b/,relevance:0},O={className:"number",begin:r,relevance:0},C={begin:/\[/,end:/\]/,keywords:{$pattern:/<:|>:|[+-?_:]/,keyword:"<: >: : + - ? _"},contains:[e.C_BLOCK_COMMENT_MODE,{className:"type",begin:n}],relevance:3},b={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:_("inline using"),contains:[e.C_BLOCK_COMMENT_MODE,e.QUOTE_STRING_MODE,O,g]},u={className:"params",begin:/\(using (?!\w+:)/,end:/\)/,excludeBegin:!1,excludeEnd:!0,relevance:5,keywords:_("using"),contains:[g]},N={className:"subst",variants:[{begin:/\$[a-zA-Z_]\w*/},{begin:/\${/,end:/}/,contains:[O,e.QUOTE_STRING_MODE]}]},w={className:"string",variants:[e.QUOTE_STRING_MODE,{begin:'"""',end:'"""',contains:[e.BACKSLASH_ESCAPE],relevance:10},{begin:n.source+'"',end:'"',contains:[e.BACKSLASH_ESCAPE,N],illegal:/\n/,relevance:5},{begin:n.source+'"""',end:'"""',contains:[e.BACKSLASH_ESCAPE,N],relevance:10}]},y={begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:{$pattern:c.$pattern,keyword:"using "+c.keyword,literal:c.literal,built_in:c.built_in},contains:[w,O,e.C_BLOCK_COMMENT_MODE,g]},m={className:"meta",begin:`@${i.source}(\\.${i.source})*`,contains:[y,e.C_BLOCK_COMMENT_MODE]},p=e.COMMENT("/\\*\\*","\\*/",{contains:[{className:"doctag",begin:/@[a-zA-Z]+/},{className:"code",variants:[{begin:/```.*\n/,end:/```/},{begin:/`/,end:/`/}]},{className:"bold",variants:[{begin:/\*\*/,end:/\*\*/},{begin:/__/,end:/__/}]},{className:"emphasis",variants:[{begin:/\*(?!([\*\s/])|([^\*]*\*[\*/]))/,end:/\*/},{begin:/_/,end:/_/}]},{className:"bullet",begin:/- (?=\S)/,end:/\s/},{begin:/\[.*?\]\(/,end:/\)/,contains:[{className:"link",begin:/.*?/,endsWithParent:!0}]}]}),$={className:"function",begin:`((${l}|transparent|inline|infix) +)*def`,end:/ =\s|\n/,excludeEnd:!0,relevance:5,keywords:_("inline infix transparent"),contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,C,u,b,M,g,o]},k={beginKeywords:"val var",end:/[=:;\n/]/,excludeEnd:!0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,E]},v={className:"typedef",begin:`((${l}|opaque) +)*type`,end:/[=;\n]| ?[<>]:/,excludeEnd:!0,keywords:_("opaque"),contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,g,o]},D={begin:/given/,end:/ =|[=;\n]/,excludeEnd:!0,keywords:"given using with",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,b,{begin:"as",keywords:"as"},g,o]},T={begin:/extension/,end:/(\n|def)/,returnEnd:!0,keywords:"extension implicit using",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,u,b,g]},x={begin:`end(?= (if|while|for|match|try|given|extension|this|val|${i.source})\\n)`,end:/\s/,keywords:"end"},h={begin:" extends ",end:/( with | derives |\/[/*])/,endsWithParent:!0,returnEnd:!0,keywords:"extends",contains:[y,g]},L={begin:" with ",end:/ derives |\/[/*]/,endsWithParent:!0,returnEnd:!0,keywords:"with",contains:[y,g],relevance:10},f={begin:" derives ",end:/\n|\/[/*]/,endsWithParent:!0,returnEnd:!0,keywords:"derives",contains:[g],relevance:10},B={className:"class",begin:`((${l}|open|case|transparent) +)*(class|trait|enum|object|package object)`,end:/(\/[/*]|{|:(?= *\n)|\n(?! *(extends|with|derives)))/,keywords:_("open transparent"),excludeEnd:!0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,C,u,b,h,L,f,o,g]},A={className:"package",begin:/package (?=\w+ *[:{\n])/,end:/[:{\n]/,excludeEnd:!0,keywords:c,contains:[o]},K={begin:/case (?!.*=>)/,end:/\n/,keywords:"case",excludeEnd:!0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,b,h,L,f,o,g]},I={begin:/case/,end:/=>|\n/,keywords:"case",excludeEnd:!0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{begin:/[@_]/,keywords:{$pattern:/[@_]/,keyword:"@ _"}},O,w,g]};return{name:"Scala3",aliases:["scala","dotty"],keywords:c,contains:[O,w,p,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,$,k,v,A,B,D,T,m,K,I,{begin:/inline [^\n:]+ match/,keywords:"inline match"},x,y,g]}}