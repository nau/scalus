"use strict";(self.webpackChunkscalus_website=self.webpackChunkscalus_website||[]).push([[844],{2423:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(5893),s=n(1151);const i={hide_table_of_contents:!1},r="Scalus - Scala 3 based Cardano smart contracts and DApps Development Framework",l={type:"mdx",permalink:"/scalus/",source:"@site/src/pages/index.md",title:"Scalus - Scala 3 based Cardano smart contracts and DApps Development Framework",description:"Scalus is a set of libraries to work with Cardano Untyped Plutus Core that works on both JVM and JavaScript.",frontMatter:{hide_table_of_contents:!1},unlisted:!1},o={},c=[{value:"Scalus Starter Project",id:"scalus-starter-project",level:2},{value:"Preimage Validator Example",id:"preimage-validator-example",level:2},{value:"Why Scala?",id:"why-scala",level:2},{value:"What currently works?",id:"what-currently-works",level:2},{value:"Comparison to PlutusTx, Aiken, Plutarch",id:"comparison-to-plutustx-aiken-plutarch",level:2},{value:"Support",id:"support",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{Details:n}=a;return n||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h1,{id:"scalus---scala-3-based-cardano-smart-contracts-and-dapps-development-framework",children:"Scalus - Scala 3 based Cardano smart contracts and DApps Development Framework"}),"\n",(0,t.jsx)(a.p,{children:"Scalus is a set of libraries to work with Cardano Untyped Plutus Core that works on both JVM and JavaScript.\nThis includes:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Scala 3 to Cardano Plutus Core compiler"}),"\n",(0,t.jsx)(a.li,{children:"Standard library for Plutus contracts development"}),"\n",(0,t.jsx)(a.li,{children:"Plutus VM evaluation machine"}),"\n",(0,t.jsx)(a.li,{children:"Property-based testing library"}),"\n",(0,t.jsx)(a.li,{children:"Untyped Plutus Core (UPLC) data types and functions"}),"\n",(0,t.jsx)(a.li,{children:"Flat, CBOR, JSON serialization"}),"\n",(0,t.jsx)(a.li,{children:"UPLC parser and pretty printer"}),"\n",(0,t.jsx)(a.li,{children:"Type safe UPLC expression builder, think of Plutarch"}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"scalus-starter-project",children:"Scalus Starter Project"}),"\n",(0,t.jsxs)(a.p,{children:["You can use the ",(0,t.jsx)(a.a,{href:"https://github.com/nau/scalus-starter",children:"Scalus Starter Project"})," to get started with Scalus.\nClone the repository and follow the instructions in the README."]}),"\n",(0,t.jsx)(a.h2,{id:"preimage-validator-example",children:"Preimage Validator Example"}),"\n",(0,t.jsxs)(a.p,{children:["Here is a simple validator that checks that an signer of ",(0,t.jsx)(a.code,{children:"pkh"})," PubKeyHash provided a preimage of a ",(0,t.jsx)(a.code,{children:"hash"})," in a ",(0,t.jsx)(a.code,{children:"redeemer"}),".\nBelow example is taken from ",(0,t.jsx)(a.code,{children:"PreImageExampleSpec.scala"})," and it actually works!"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'def preimageValidator(datum: Data, redeemer: Data, ctxData: Data): Unit = {\n  // deserialize from Data\n  val (hash, pkh) = fromData[(ByteString, ByteString)](datum)\n  val preimage = fromData[ByteString](redeemer)\n  val ctx = fromData[ScriptContext](ctxData)\n  // get the transaction signatories\n  val signatories = ctx.txInfo.signatories\n  // check that the transaction is signed by the public key hash\n  List.findOrFail(signatories) { sig => sig.hash === pkh }\n  // check that the preimage hashes to the hash\n  if Builtins.sha2_256(preimage) === hash then ()\n  else throw new RuntimeException("Wrong preimage")\n  // throwing an exception compiles to UPLC error\n}\n// compile to Scalus Intermediate Representation, SIR\nval compiled = compile(preimageValidator)\n// convert SIR to UPLC\nval validator = compiled.toUplc()\nval flatSize = Program((1, 0, 0), validator).flatEncoded.length\nassert(flatSize == 1586)\n'})}),"\n",(0,t.jsx)(a.p,{children:"Here is a full example of a token minting/burning validator that works on both JVM and JavaScript:"}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.a,{href:"https://github.com/nau/scalus/blob/master/shared/src/main/scala/scalus/examples/MintingPolicy.scala",children:"MintingPolicy.scala"})}),"\n",(0,t.jsxs)(a.p,{children:["And here is a project that uses it in web frontend:\n",(0,t.jsx)(a.a,{href:"https://github.com/nau/scalus/tree/master/examples-js",children:"Scalus Minting Example"})]}),"\n",(0,t.jsx)(a.h2,{id:"why-scala",children:"Why Scala?"}),"\n",(0,t.jsx)(a.p,{children:"Haskell is great. It is a functional language with a lot of features.\nBut the developer experience is not great: huge compilation time, Nix rebuilds the whole Universe every time you git\npull, IDE support is not even close to what IntelliJ Idea has.\nAnd there is no debugger."}),"\n",(0,t.jsx)(a.p,{children:"Scala is great too. It is a functional language with a lot of features.\nAnd the developer experience is great: debugger, code navigation and refactorings that just work.\nCompilation time is instant compared to Haskell."}),"\n",(0,t.jsx)(a.p,{children:"And you get a decent JavaScript support!"}),"\n",(0,t.jsx)(a.p,{children:"And you get the whole Java/Scala/Kotlin ecosystem for free!"}),"\n",(0,t.jsx)(a.p,{children:"And you write once, run anywhere! Including Node.js and browsers."}),"\n",(0,t.jsx)(a.p,{children:"And it's easy to package and distribute! (Yes, the JAR is free!)"}),"\n",(0,t.jsx)(a.p,{children:"Maybe even Spring Plutus some day :)"}),"\n",(0,t.jsx)(a.h2,{id:"what-currently-works",children:"What currently works?"}),"\n",(0,t.jsx)(a.p,{children:"WARNING. It's not safe for production use! Yet.\nThis project seeks funding to make it production ready."}),"\n",(0,t.jsx)(a.p,{children:"What you can play with:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Scala compiler plugin to convert Scala code to UPLC"}),"\n",(0,t.jsx)(a.li,{children:"All the Plutus builtins are implemented"}),"\n",(0,t.jsx)(a.li,{children:"You can write Plutus V1 and V2 scripts"}),"\n",(0,t.jsx)(a.li,{children:"Flat UPLC serialization works on both JVM and JavaScript"}),"\n",(0,t.jsx)(a.li,{children:"CBOR serialization of Data works on both JVM and JavaScript"}),"\n",(0,t.jsx)(a.li,{children:"DeBruijn/unDeBruijn conversion works on both JVM and JavaScript"}),"\n",(0,t.jsx)(a.li,{children:"Type safe UPLC expression builder prototype works on both JVM and JavaScript"}),"\n",(0,t.jsx)(a.li,{children:"There are a couple of simple validators that can be used for real."}),"\n",(0,t.jsx)(a.li,{children:"CEK UPLC evaluation machine works on both JVM and JavaScript (not all builtins are implemented yet)"}),"\n",(0,t.jsx)(a.li,{children:"textual UPLC parser and pretty printer works on both JVM and JavaScript"}),"\n",(0,t.jsx)(a.li,{children:"The PubKey validator is 138 bytes long! It's 14x smaller than the 1992 bytes long PlutusTx version!"}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"comparison-to-plutustx-aiken-plutarch",children:"Comparison to PlutusTx, Aiken, Plutarch"}),"\n",(0,t.jsx)(a.p,{children:"PlutusTx compiles almost any Haskell program to UPLC.\nCons are that you can barely understand how the UPLC is generated and how to make it smaller."}),"\n",(0,t.jsx)(a.p,{children:"Aiken is a separate programming language which is a pro and a con."}),"\n",(0,t.jsx)(a.p,{children:"Plutarch is very low-level. Use it when you need precise control over a script generation."}),"\n",(0,t.jsx)(a.p,{children:"Scalus aimes to be a better version of all the above."}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsx)(a.p,{children:"You can actually reuse Scala code for your validator, frontend and backend! The goal that PlutusTx failed to achieve."}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsx)(a.p,{children:"You can use existing Scala libraries for testing, including ScalaCheck and ScalaTest."}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsx)(a.p,{children:"Scalus leverages all the development tools that Scala has, including IntelliJ Idea, VSCode, sbt, even GitHub CoPilot and ChatGPT! No need to learn new tools and languages."}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsx)(a.p,{children:"Debugger! It works!"}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsx)(a.p,{children:"Scalus allows only a limited subset of Scala, that can be reasonably efficiently\ncompiled to UPLC without bloating the code."}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsx)(a.p,{children:"It's compiled to a fairly high-level human readable intermediate representation, SIR."}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:["The huge part of any usefull script is ",(0,t.jsx)(a.code,{children:"ScriptContext"})," deserialization from ",(0,t.jsx)(a.code,{children:"Data"})," representation.\nScalus also provides primitives to do your custom deserialization to reduce validator size."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Here is an optimized version of Preimage Validator from the above:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'def preimageValidator(datum: Data, redeemer: Data, ctxData: Data): Unit = {\n  fromData[(ByteString, ByteString)](datum) match\n    case (hash, pkh) =>\n      val preimage = fromData[ByteString](redeemer)\n      val signatories = fromData[List[PubKeyHash]](\n        // deserialize only the signatories from the ScriptContext\n        fieldAsData[ScriptContext](_.txInfo.signatories)(ctxData)\n      )\n\n      List.findOrFail(signatories) { sig => sig.hash === pkh }\n      if Builtins.sha2_256(preimage) === hash then ()\n      else throw new RuntimeException("Wrong preimage")\n}\n\nval compiled = compile(preimageValidator)\nval validator = compiled.toUplc()\nval flatSize = Program((1, 0, 0), validator).flatEncoded.length\nassert(flatSize == 257)\n'})}),"\n",(0,t.jsx)(a.p,{children:"You can see that deserialising only the fields we actually need significantly reduces the script size:\n274 bytes versus 1684!"}),"\n",(0,t.jsxs)(a.p,{children:["This script compiles to ",(0,t.jsx)(a.code,{children:"SIR"})," that can be pretty-printed in an OCaml-like syntax:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:"val compiled = compile(preimageValidator)\ncompiled.pretty.render(100)\n"})}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Click me to see SIR"}),(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ocaml",children:"data Tuple2 = Tuple2(_1, _2)\ndata List = Cons(head, tail) | Nil\ndata PubKeyHash = PubKeyHash(hash)\nfun scalus.uplc.FromDataInstances$.unsafeTupleFromData fromA fromB d =\n    let pair = unConstrData(d) in\n    let args = sndPair(pair) in\n    Tuple2(fromA(headList(args)), fromB(headList(tailList(args))))\nin fun scalus.uplc.FromDataInstances$.given_FromData_ByteString d = unBData(d)\nin fun scalus.uplc.FromDataInstances$.ListFromData evidence$1 d =\n       let ls = unListData(d) in\n       fun loop ls =\n           if nullList(ls) then Nil() else Cons(evidence$1(headList(ls)), loop(tailList(ls)))\n       in loop(ls)\nin fun scalus.ledger.api.v1.FromDataInstances$.fromDataPubKeyHash d =\n       let hash = scalus.uplc.FromDataInstances$.given_FromData_ByteString(d) in\n       PubKeyHash(hash)\nin fun scalus.prelude.List$.findOrFail lst p =\n       match lst with\n         case Cons(head, tail) -> if p(head) then head else scalus.prelude.List$.findOrFail(tail, p)\n         case Nil -> ERROR 'Not found'\nin fun scalus.prelude.Prelude$.given_Eq_ByteString x y = equalsByteString(x, y)\nin fun scalus.OptimizedPreimageValidator$.preimageValidator datum redeemer ctxData =\n       match scalus.uplc.FromDataInstances$.unsafeTupleFromData(\n         scalus.uplc.FromDataInstances$.given_FromData_ByteString,\n         scalus.uplc.FromDataInstances$.given_FromData_ByteString,\n         datum\n       ) with\n         case Tuple2(hash, pkh) ->\n           let preimage = scalus.uplc.FromDataInstances$.given_FromData_ByteString(redeemer) in\n           let signatories =\n             scalus.uplc.FromDataInstances$.ListFromData(\n               {\u03bb d -> scalus.ledger.api.v1.FromDataInstances$.fromDataPubKeyHash(d) },\n               let d$proxy1 = headList(sndPair(unConstrData(ctxData))) in\n               headList(\n                 tailList(\n                   tailList(\n                     tailList(\n                       tailList(tailList(tailList(tailList(sndPair(unConstrData(d$proxy1))))))\n                     )\n                   )\n                 )\n               )\n             )\n           in\n           let _ =\n             scalus.prelude.List$.findOrFail(\n               signatories,\n               {\u03bb sig -> scalus.prelude.Prelude$.given_Eq_ByteString(sig({\u03bb hash -> hash }), pkh) }\n             )\n           in\n           if\n               let x$proxy1 = sha2_256(preimage) in\n               scalus.prelude.Prelude$.given_Eq_ByteString(x$proxy1, hash) then ()\n           else\n               ERROR 'Wrong preimage'\nin scalus.OptimizedPreimageValidator$.preimageValidator\n"})})]}),"\n",(0,t.jsx)(a.h2,{id:"support",children:"Support"}),"\n",(0,t.jsxs)(a.p,{children:["You can ask questions on Scalus Discord: ",(0,t.jsx)(a.a,{href:"https://discord.gg/ygwtuBybsy",children:"https://discord.gg/ygwtuBybsy"})]}),"\n",(0,t.jsxs)(a.p,{children:["The project is looking for funding to make it production ready.\nIf you are interested, please contact me at ",(0,t.jsx)(a.a,{href:"https://twitter.com/atlanter",children:"@atlanter"})," on Twitter.\nFollow the official Scalus Twitter account: ",(0,t.jsx)(a.a,{href:"https://twitter.com/Scalus3",children:"@Scalus3"}),"."]}),"\n",(0,t.jsx)(a.p,{children:"You can support the project by donating ADA or BTC to the following addresses:"}),"\n",(0,t.jsx)(a.p,{children:"ADA: addr1qxwg0u9fpl8dac9rkramkcgzerjsfdlqgkw0q8hy5vwk8tzk5pgcmdpe5jeh92guy4mke4zdmagv228nucldzxv95clqe35r3m"}),"\n",(0,t.jsx)(a.p,{children:"BTC: bc1qzefh9we0frls8ktm0dx428v2dx3wtp6xu4hd8k"}),"\n",(0,t.jsx)(a.p,{children:"Please, consider becoming a sponsor on GitHub."}),"\n",(0,t.jsx)(a.p,{children:"And vote for the project on Cardano Catalyst!"})]})}function h(e={}){const{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);