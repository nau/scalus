"use strict";(self.webpackChunkscalus_website=self.webpackChunkscalus_website||[]).push([[836],{7139:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"internal/Hashes","title":"Hash-related types","description":"Dimensions of choices:","source":"@site/../scalus-docs/target/mdoc/internal/Hashes.md","sourceDirName":"internal","slug":"/internal/Hashes","permalink":"/docs/internal/Hashes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Examples","permalink":"/docs/Examples"},"next":{"title":"Typing","permalink":"/docs/internal/Typing"}}');var a=n(4848),i=n(8453);const o={},r="Hash-related types",c={},l=[{value:"Dimensions of choices:",id:"dimensions-of-choices",level:2},{value:"Compatibility considerations",id:"compatibility-considerations",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"hash-related-types",children:"Hash-related types"})}),"\n",(0,a.jsx)(s.h2,{id:"dimensions-of-choices",children:"Dimensions of choices:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"3",children:"opaque type Hash <: ByteString\nopaque type Hash <: Array[Byte]\nopaque type Hash <: IArray[Byte]\n\ntype Hash[Size <: Int & Singleton]\ntype Hash[+HF, Size <: Int & Singleton]\ntype Hash[+HF, Size <: Int & Singleton, +Purpose]\ncase class Hash28(value: Array[Byte])\ncase class Hash28(value: IArray[Byte])\ncase class Hash28(value: ByteString)\n"})}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["Hash type: ",(0,a.jsx)(s.code,{children:"Hash"})," or ",(0,a.jsx)(s.code,{children:"Hash[HF, Size]"})," or ",(0,a.jsx)(s.code,{children:"Hash[HF, Size, Purpose]"})]}),"\n",(0,a.jsx)(s.li,{children:"opaque vs type alias vs case class"}),"\n",(0,a.jsxs)(s.li,{children:["over ",(0,a.jsx)(s.code,{children:"ByteString"})," vs ",(0,a.jsx)(s.code,{children:"IArray[Byte]"})," vs ",(0,a.jsx)(s.code,{children:"Array[Byte]"})]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"compatibility-considerations",children:"Compatibility considerations"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsx)(s.li,{children:"For Java/Kotlin, opaque types are just type aliases, so no type safety there."}),"\n",(0,a.jsx)(s.li,{children:"Wrapping Array[Byte] in a case class is type-safe, but adds overhead."}),"\n",(0,a.jsx)(s.li,{children:"Wrapping ByteString in a case class is type-safe, but adds even more overhead."}),"\n",(0,a.jsxs)(s.li,{children:["We use ",(0,a.jsx)(s.code,{children:"ByteString"})," for script evaluation and onchain data types, so it makes sense to use it as the base type for\n",(0,a.jsx)(s.code,{children:"Hash"}),". This allows us to use the same type for both offchain and onchain data, which is convenient."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["So, looks like the compromise is to use ",(0,a.jsx)(s.code,{children:"ByteString"})," as the base type for ",(0,a.jsx)(s.code,{children:"Hash"}),", and use opaque types for type safety."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>r});var t=n(6540);const a={},i=t.createContext(a);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);