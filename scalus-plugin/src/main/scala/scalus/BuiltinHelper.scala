package scalus
import scalus.sir.SIR
import scalus.uplc.DefaultFun

object BuiltinHelper {
  val DefaultFunValues: Map[String, DefaultFun] = Map(
    "scalus.builtins.Builtins.addInteger" -> DefaultFun.AddInteger,
    "scalus.builtins.Builtins.subtractInteger" -> DefaultFun.SubtractInteger,
    "scalus.builtins.Builtins.multiplyInteger" -> DefaultFun.MultiplyInteger,
    "scalus.builtins.Builtins.divideInteger" -> DefaultFun.DivideInteger,
    "scalus.builtins.Builtins.quotientInteger" -> DefaultFun.QuotientInteger,
    "scalus.builtins.Builtins.remainderInteger" -> DefaultFun.RemainderInteger,
    "scalus.builtins.Builtins.modInteger" -> DefaultFun.ModInteger,
    "scalus.builtins.Builtins.equalsInteger" -> DefaultFun.EqualsInteger,
    "scalus.builtins.Builtins.lessThanInteger" -> DefaultFun.LessThanInteger,
    "scalus.builtins.Builtins.lessThanEqualsInteger" -> DefaultFun.LessThanEqualsInteger,
    "scalus.builtins.Builtins.appendByteString" -> DefaultFun.AppendByteString,
    "scalus.builtins.Builtins.consByteString" -> DefaultFun.ConsByteString,
    "scalus.builtins.Builtins.sliceByteString" -> DefaultFun.SliceByteString,
    "scalus.builtins.Builtins.lengthOfByteString" -> DefaultFun.LengthOfByteString,
    "scalus.builtins.Builtins.indexByteString" -> DefaultFun.IndexByteString,
    "scalus.builtins.Builtins.equalsByteString" -> DefaultFun.EqualsByteString,
    "scalus.builtins.Builtins.lessThanByteString" -> DefaultFun.LessThanByteString,
    "scalus.builtins.Builtins.lessThanEqualsByteString" -> DefaultFun.LessThanEqualsByteString,
    "scalus.builtins.Builtins.sha2_256" -> DefaultFun.Sha2_256,
    "scalus.builtins.Builtins.sha3_256" -> DefaultFun.Sha3_256,
    "scalus.builtins.Builtins.blake2b_256" -> DefaultFun.Blake2b_256,
    "scalus.builtins.Builtins.verifyEd25519Signature" -> DefaultFun.VerifyEd25519Signature,
    "scalus.builtins.Builtins.verifyEcdsaSecp256k1Signature" -> DefaultFun.VerifyEcdsaSecp256k1Signature,
    "scalus.builtins.Builtins.verifySchnorrSecp256k1Signature" -> DefaultFun.VerifySchnorrSecp256k1Signature,
    "scalus.builtins.Builtins.appendString" -> DefaultFun.AppendString,
    "scalus.builtins.Builtins.equalsString" -> DefaultFun.EqualsString,
    "scalus.builtins.Builtins.encodeUtf8" -> DefaultFun.EncodeUtf8,
    "scalus.builtins.Builtins.decodeUtf8" -> DefaultFun.DecodeUtf8,
    "scalus.builtins.Builtins.ifThenElse" -> DefaultFun.IfThenElse,
    "scalus.builtins.Builtins.chooseUnit" -> DefaultFun.ChooseUnit,
    "scalus.builtins.Builtins.trace" -> DefaultFun.Trace,
    "scalus.builtins.Builtins.fstPair" -> DefaultFun.FstPair,
    "scalus.builtins.Builtins.sndPair" -> DefaultFun.SndPair,
    "scalus.builtins.Builtins.chooseList" -> DefaultFun.ChooseList,
    "scalus.builtins.Builtins.mkCons" -> DefaultFun.MkCons,
    "scalus.builtins.Builtins.headList" -> DefaultFun.HeadList,
    "scalus.builtins.Builtins.tailList" -> DefaultFun.TailList,
    "scalus.builtins.Builtins.nullList" -> DefaultFun.NullList,
    "scalus.builtins.Builtins.chooseData" -> DefaultFun.ChooseData,
    "scalus.builtins.Builtins.mkConstr" -> DefaultFun.ConstrData,
    "scalus.builtins.Builtins.mkMap" -> DefaultFun.MapData,
    "scalus.builtins.Builtins.mkList" -> DefaultFun.ListData,
    "scalus.builtins.Builtins.mkI" -> DefaultFun.IData,
    "scalus.builtins.Builtins.mkB" -> DefaultFun.BData,
    "scalus.builtins.Builtins.unsafeDataAsConstr" -> DefaultFun.UnConstrData,
    "scalus.builtins.Builtins.unsafeDataAsMap" -> DefaultFun.UnMapData,
    "scalus.builtins.Builtins.unsafeDataAsList" -> DefaultFun.UnListData,
    "scalus.builtins.Builtins.unsafeDataAsI" -> DefaultFun.UnIData,
    "scalus.builtins.Builtins.unsafeDataAsB" -> DefaultFun.UnBData,
    "scalus.builtins.Builtins.equalsData" -> DefaultFun.EqualsData,
    "scalus.builtins.Builtins.serialiseData" -> DefaultFun.SerialiseData,
    "scalus.builtins.Builtins.mkPairData" -> DefaultFun.MkPairData,
    "scalus.builtins.Builtins.mkNilData" -> DefaultFun.MkNilData,
    "scalus.builtins.Builtins.mkNilPairData" -> DefaultFun.MkNilPairData
  )
  def builtinFun(tpe: String): Option[SIR.Builtin] = {
    DefaultFunValues.get(tpe).map(SIR.Builtin.apply)
  }
}
