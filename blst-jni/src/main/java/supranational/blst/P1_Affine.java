/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package supranational.blst;

public class P1_Affine {
  private transient long[] swigCPtr;

  protected P1_Affine(long[] cPtr) { swigCPtr = cPtr; }

  protected static long[] getCPtr(P1_Affine obj) {
    return obj != null ? obj.swigCPtr : null;
  }

  public P1_Affine dup() { return new P1_Affine(swigCPtr.clone()); }

  public P1_Affine() { this(blstJNI.new_P1_Affine__SWIG_0()); }

  public P1_Affine(byte[] in) { this(blstJNI.new_P1_Affine__SWIG_1(in)); }

  public P1_Affine(P1 jacobian) { this(blstJNI.new_P1_Affine__SWIG_2(P1.getCPtr(jacobian))); }

  public P1 to_jacobian() {
    return new P1(blstJNI.P1_Affine_to_jacobian(swigCPtr));
}

  public byte[] serialize() { return blstJNI.P1_Affine_serialize(swigCPtr); }

  public byte[] compress() { return blstJNI.P1_Affine_compress(swigCPtr); }

  public boolean on_curve() {
    return blstJNI.P1_Affine_on_curve(swigCPtr);
  }

  public boolean in_group() {
    return blstJNI.P1_Affine_in_group(swigCPtr);
  }

  public boolean is_inf() {
    return blstJNI.P1_Affine_is_inf(swigCPtr);
  }

  public boolean is_equal(P1_Affine p) {
    return blstJNI.P1_Affine_is_equal(swigCPtr, P1_Affine.getCPtr(p));
  }

  public BLST_ERROR core_verify(P2_Affine pk, boolean hash_or_encode, byte[] msg, String DST, byte[] aug) {
    return BLST_ERROR.swigToEnum(blstJNI.P1_Affine_core_verify__SWIG_0(swigCPtr, P2_Affine.getCPtr(pk), hash_or_encode, msg, DST, aug));
  }

  public BLST_ERROR core_verify(P2_Affine pk, boolean hash_or_encode, byte[] msg, String DST) {
    return BLST_ERROR.swigToEnum(blstJNI.P1_Affine_core_verify__SWIG_2(swigCPtr, P2_Affine.getCPtr(pk), hash_or_encode, msg, DST));
  }

  public BLST_ERROR core_verify(P2_Affine pk, boolean hash_or_encode, byte[] msg) {
    return BLST_ERROR.swigToEnum(blstJNI.P1_Affine_core_verify__SWIG_3(swigCPtr, P2_Affine.getCPtr(pk), hash_or_encode, msg));
  }

  public static P1_Affine generator() {
    return new P1_Affine(blstJNI.P1_Affine_generator());
}

}
