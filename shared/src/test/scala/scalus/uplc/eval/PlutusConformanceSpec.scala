package scalus
package uplc
package eval

import org.scalatest.funsuite.AnyFunSuite

import scala.util.Failure
import scala.util.Success
import scala.util.Try

/** Tests for the Plutus Conformance Test Suite.
  *
  * @note
  *   This tests run only on JVM right now.
  */
abstract class PlutusConformanceSpec extends AnyFunSuite:
    // Run this command in plutus-conformance to generate the test cases
    // find . -name "*.uplc" -print0 | sort -zf | xargs -0 -I {} bash -c 'file="{}"; rel_path="${file#./}"; without_ext="${rel_path%.uplc}"; echo "check(\"$without_ext\")"'

    // disable scalafmt for the following block
    // format: off
    
    check("builtin/constant/bool/False/False")
    check("builtin/constant/bool/True/True")
    check("builtin/constant/bytestring/bytestring1/bytestring1")
    check("builtin/constant/bytestring/bytestring2/bytestring2")
    check("builtin/constant/bytestring/bytestring3/bytestring3")
    check("builtin/constant/bytestring/bytestring4/bytestring4")
    check("builtin/constant/data/dataByteString/dataByteString")
    check("builtin/constant/data/dataConstr/dataConstr")
    check("builtin/constant/data/dataInteger/dataInteger")
    check("builtin/constant/data/dataList/dataList")
    check("builtin/constant/data/dataMap/dataMap")
    check("builtin/constant/data/dataMisByteString/dataMisByteString")
    check("builtin/constant/data/dataMisConstr/dataMisConstr")
    check("builtin/constant/data/dataMisInteger/dataMisInteger")
    check("builtin/constant/data/dataMisList/dataMisList")
    check("builtin/constant/data/dataMisMap/dataMisMap")
    check("builtin/constant/integer/integer1/integer1")
    check("builtin/constant/integer/integer10/integer10")
    check("builtin/constant/integer/integer2/integer2")
    check("builtin/constant/integer/integer3/integer3")
    check("builtin/constant/integer/integer4/integer4")
    check("builtin/constant/integer/integer5/integer5")
    check("builtin/constant/integer/integer6/integer6")
    check("builtin/constant/integer/integer7/integer7")
    check("builtin/constant/integer/integer8/integer8")
    check("builtin/constant/integer/integer9/integer9")
    check("builtin/constant/list/emptyList/emptyList")
    check("builtin/constant/list/illTypedList1/illTypedList1")
    check("builtin/constant/list/illTypedList2/illTypedList2")
    check("builtin/constant/list/simpleList/simpleList")
    check("builtin/constant/list/unitList/unitList")
    check("builtin/constant/pair/illTypedNestedPair/illTypedNestedPair")
    check("builtin/constant/pair/illTypedPair1/illTypedPair1")
    check("builtin/constant/pair/illTypedPair2/illTypedPair2")
    check("builtin/constant/pair/nestedPair/nestedPair")
    check("builtin/constant/pair/simplePair/simplePair")
    check("builtin/constant/string/string1/string1")
    check("builtin/constant/string/string2/string2")
    check("builtin/constant/string/string3/string3")
    check("builtin/constant/string/string4/string4")
    check("builtin/constant/string/string5/string5")
    check("builtin/constant/string/string6/string6")
    check("builtin/constant/unit/conUnit")
    check("builtin/interleaving/ite/ite")
    check("builtin/interleaving/iteAtIntegerArrowIntegerApplied1/iteAtIntegerArrowIntegerApplied1")
    check("builtin/interleaving/iteAtIntegerArrowIntegerApplied2/iteAtIntegerArrowIntegerApplied2")
    check("builtin/interleaving/iteAtIntegerArrowIntegerAppliedApplied/iteAtIntegerArrowIntegerAppliedApplied")
    check("builtin/interleaving/iteAtIntegerArrowIntegerWithCond/iteAtIntegerArrowIntegerWithCond")
    check("builtin/interleaving/iteForceAppForce/iteForceAppForce")
    check("builtin/interleaving/iteForced/iteForced")
    check("builtin/interleaving/iteForcedForced/iteForcedForced")
    check("builtin/interleaving/iteForcedWithIntegerAndString/iteForcedWithIntegerAndString")
    check("builtin/interleaving/iteStringInteger/iteStringInteger")
    check("builtin/interleaving/iteStringString/iteStringString")
    check("builtin/interleaving/iteUnforcedFullyApplied/iteUnforcedFullyApplied")
    check("builtin/interleaving/iteUnforcedWithCond/iteUnforcedWithCond")
    check("builtin/interleaving/iteWrongCondTypeFullyAppied/iteWrongCondTypeFullyAppied")
    check("builtin/interleaving/iteWrongCondTypePartiallyApplied/iteWrongCondTypePartiallyApplied")
    check("builtin/interleaving/multiplyIntegerForceError1/multiplyIntegerForceError1")
    check("builtin/interleaving/multiplyIntegerForceError2/multiplyIntegerForceError2")
    check("builtin/interleaving/multiplyIntegerForceError3/multiplyIntegerForceError3")
    check("builtin/semantics/addInteger/addInteger-uncurried/addInteger-uncurried")
    check("builtin/semantics/addInteger/addInteger1/addInteger1")
    check("builtin/semantics/addInteger/addInteger2/addInteger2")
    check("builtin/semantics/addInteger/addInteger3/addInteger3")
    check("builtin/semantics/addInteger/addInteger4/addInteger4")
    check("builtin/semantics/appendByteString/appendByteString1/appendByteString1")
    check("builtin/semantics/appendByteString/appendByteString2/appendByteString2")
    check("builtin/semantics/appendByteString/appendByteString3/appendByteString3")
    check("builtin/semantics/appendString/appendString")
    check("builtin/semantics/bData/bData")
    check("builtin/semantics/blake2b_224/blake2b_224-empty/blake2b_224-empty")
    check("builtin/semantics/blake2b_224/blake2b_224-length-200/blake2b_224-length-200")
    check("builtin/semantics/blake2b_256/blake2b_256-empty/blake2b_256-empty")
    check("builtin/semantics/blake2b_256/blake2b_256-length-200/blake2b_256-length-200")
    
    check("builtin/semantics/byteStringToInteger/big-endian/all-zeros/all-zeros")
    check("builtin/semantics/byteStringToInteger/big-endian/correct-output/correct-output")
    check("builtin/semantics/byteStringToInteger/big-endian/empty/empty")
    check("builtin/semantics/byteStringToInteger/big-endian/leading-zeros/leading-zeros")
    check("builtin/semantics/byteStringToInteger/both-endian/both-endian")
    check("builtin/semantics/byteStringToInteger/little-endian/all-zeros/all-zeros")
    check("builtin/semantics/byteStringToInteger/little-endian/correct-output/correct-output")
    check("builtin/semantics/byteStringToInteger/little-endian/empty/empty")
    check("builtin/semantics/byteStringToInteger/little-endian/trailing-zeros/trailing-zeros")
    check("builtin/semantics/chooseDataByteString/chooseDataByteString")
    check("builtin/semantics/chooseDataConstr/chooseDataConstr")
    check("builtin/semantics/chooseDataInteger/chooseDataInteger")
    check("builtin/semantics/chooseDataList/chooseDataList")
    check("builtin/semantics/chooseDataMap/chooseDataMap")
    check("builtin/semantics/chooseList/chooseList1/chooseList1")
    check("builtin/semantics/chooseList/chooseList2/chooseList2")
    check("builtin/semantics/chooseList/chooseList3/chooseList3")
    check("builtin/semantics/chooseList/chooseList4/chooseList4")
    check("builtin/semantics/chooseUnit/chooseUnit")
    check("builtin/semantics/chooseUnit2/chooseUnit2")
    check("builtin/semantics/consByteString/consByteString1/consByteString1")
    check("builtin/semantics/consByteString/consByteString2/consByteString2")
    check("builtin/semantics/consByteString/consByteString3/consByteString3")
    check("builtin/semantics/constrData/constrData")
    check("builtin/semantics/decodeUtf8/decodeUtf8-invalid/decodeUtf8-invalid")
    check("builtin/semantics/decodeUtf8/decodeUtf8-ok/decodeUtf8-ok")
    check("builtin/semantics/divideInteger/divideInteger-neg-neg/divideInteger-neg-neg")
    check("builtin/semantics/divideInteger/divideInteger-neg-pos/divideInteger-neg-pos")
    check("builtin/semantics/divideInteger/divideInteger-pos-neg/divideInteger-pos-neg")
    check("builtin/semantics/divideInteger/divideInteger-pos-pos/divideInteger-pos-pos")
    check("builtin/semantics/divideInteger/divideInteger-zero/divideInteger-zero")
    check("builtin/semantics/divideInteger/divideInteger1/divideInteger1")
    check("builtin/semantics/encodeUtf8/encodeUtf8")
    check("builtin/semantics/equalsByteString/equalsByteString/equalsByteString")
    check("builtin/semantics/equalsByteString/equalsByteString1/equalsByteString1")
    check("builtin/semantics/equalsByteString/equalsByteString2/equalsByteString2")
    check("builtin/semantics/equalsData/equalsData")
    check("builtin/semantics/equalsInteger/equalsInteger1/equalsInteger1")
    check("builtin/semantics/equalsInteger/equalsInteger2/equalsInteger2")
    check("builtin/semantics/equalsInteger/equalsInteger3/equalsInteger3")
    check("builtin/semantics/equalsString/equalsString1/equalsString1")
    check("builtin/semantics/equalsString/equalsString2/equalsString2")
    check("builtin/semantics/fstPairOfPairAndList/fstPairOfPairAndList")
    check("builtin/semantics/headList/headList1/headList1")
    check("builtin/semantics/headList/headList2/headList2")
    check("builtin/semantics/headList/headList3/headList3")
    check("builtin/semantics/headList/headPartial/headPartial")
    check("builtin/semantics/iData/iData")
    check("builtin/semantics/ifThenElse/ifThenElse-1/ifThenElse-1")
    check("builtin/semantics/ifThenElse/ifThenElse-2/ifThenElse-2")
    check("builtin/semantics/ifThenElse/ifThenElse-3/ifThenElse-3")
    check("builtin/semantics/ifThenElse/ifThenElse-4/ifThenElse-4")
    check("builtin/semantics/ifThenElse/ifThenElse-bad-cond-1/ifThenElse-bad-cond-1")
    check("builtin/semantics/ifThenElse/ifThenElse-bad-cond-2/ifThenElse-bad-cond-2")
    check("builtin/semantics/ifThenElse/ifThenElse-no-force/ifThenElse-no-force")
    check("builtin/semantics/indexByteString/indexByteString1/indexByteString1")
    check("builtin/semantics/indexByteString/indexByteStringOOB/indexByteStringOOB")
    check("builtin/semantics/indexByteString/indexByteStringOverflow/indexByteStringOverflow")
    check("builtin/semantics/integerToByteString/big-endian/bounded/correct-output-exact-width/correct-output-exact-width")
    check("builtin/semantics/integerToByteString/big-endian/bounded/correct-output-extra-width/correct-output-extra-width")
    check("builtin/semantics/integerToByteString/big-endian/bounded/max-input-fits-max-width/max-input-fits-max-width")
    check("builtin/semantics/integerToByteString/big-endian/bounded/max-input-width-too-small/max-input-width-too-small")
    check("builtin/semantics/integerToByteString/big-endian/bounded/max-width-input-too-big/max-width-input-too-big")
    check("builtin/semantics/integerToByteString/big-endian/bounded/maximum-width-zero/maximum-width-zero")
    check("builtin/semantics/integerToByteString/big-endian/bounded/negative-input/negative-input")
    check("builtin/semantics/integerToByteString/big-endian/bounded/negative-width/negative-width")
    check("builtin/semantics/integerToByteString/big-endian/bounded/too-narrow/too-narrow")
    check("builtin/semantics/integerToByteString/big-endian/bounded/width-too-big-zero/width-too-big-zero")
    check("builtin/semantics/integerToByteString/big-endian/bounded/zero/zero")
    check("builtin/semantics/integerToByteString/big-endian/unbounded/correct-output/correct-output")
    check("builtin/semantics/integerToByteString/big-endian/unbounded/input-too-big/input-too-big")
    check("builtin/semantics/integerToByteString/big-endian/unbounded/maximum-input/maximum-input")
    check("builtin/semantics/integerToByteString/big-endian/unbounded/negative-input/negative-input")
    check("builtin/semantics/integerToByteString/big-endian/unbounded/zero/zero")
    check("builtin/semantics/integerToByteString/little-endian/bounded/correct-output-exact-width/correct-output-exact-width")
    check("builtin/semantics/integerToByteString/little-endian/bounded/correct-output-extra-width/correct-output-extra-width")
    check("builtin/semantics/integerToByteString/little-endian/bounded/max-input-fits-max-width/max-input-fits-max-width")
    check("builtin/semantics/integerToByteString/little-endian/bounded/max-input-width-too-small/max-input-width-too-small")
    check("builtin/semantics/integerToByteString/little-endian/bounded/max-width-input-too-big/max-width-input-too-big")
    check("builtin/semantics/integerToByteString/little-endian/bounded/maximum-width-zero/maximum-width-zero")
    check("builtin/semantics/integerToByteString/little-endian/bounded/negative-input/negative-input")
    check("builtin/semantics/integerToByteString/little-endian/bounded/negative-width/negative-width")
    check("builtin/semantics/integerToByteString/little-endian/bounded/too-narrow/too-narrow")
    check("builtin/semantics/integerToByteString/little-endian/bounded/width-too-big-zero/width-too-big-zero")
    check("builtin/semantics/integerToByteString/little-endian/bounded/zero/zero")
    check("builtin/semantics/integerToByteString/little-endian/unbounded/correct-output/correct-output")
    check("builtin/semantics/integerToByteString/little-endian/unbounded/input-too-big/input-too-big")
    check("builtin/semantics/integerToByteString/little-endian/unbounded/maximum-input/maximum-input")
    check("builtin/semantics/integerToByteString/little-endian/unbounded/negative-input/negative-input")
    check("builtin/semantics/integerToByteString/little-endian/unbounded/zero/zero")
    check("builtin/semantics/keccak_256/keccak_256-empty/keccak_256-empty")
    check("builtin/semantics/keccak_256/keccak_256-length-200/keccak_256-length-200")
    check("builtin/semantics/lengthOfByteString/lengthOfByteString")
    check("builtin/semantics/lessThanByteString/lessThanByteString0/lessThanByteString0")
    check("builtin/semantics/lessThanByteString/lessThanByteString1/lessThanByteString1")
    check("builtin/semantics/lessThanByteString/lessThanByteString2/lessThanByteString2")
    check("builtin/semantics/lessThanByteString/lessThanByteString3/lessThanByteString3")
    check("builtin/semantics/lessThanByteString/lessThanByteString4/lessThanByteString4")
    check("builtin/semantics/lessThanByteString/lessThanByteString5/lessThanByteString5")
    check("builtin/semantics/lessThanEqualsByteString/lessThanEqualsByteString0/lessThanEqualsByteString0")
    check("builtin/semantics/lessThanEqualsByteString/lessThanEqualsByteString1/lessThanEqualsByteString1")
    check("builtin/semantics/lessThanEqualsByteString/lessThanEqualsByteString2/lessThanEqualsByteString2")
    check("builtin/semantics/lessThanEqualsByteString/lessThanEqualsByteString3/lessThanEqualsByteString3")
    check("builtin/semantics/lessThanEqualsInteger/lessThanEqualsInteger1/lessThanEqualsInteger1")
    check("builtin/semantics/lessThanEqualsInteger/lessThanEqualsInteger2/lessThanEqualsInteger2")
    check("builtin/semantics/lessThanEqualsInteger/lessThanEqualsInteger3/lessThanEqualsInteger3")
    check("builtin/semantics/lessThanEqualsInteger/lessThanEqualsInteger4/lessThanEqualsInteger4")
    check("builtin/semantics/lessThanEqualsInteger/lessThanEqualsInteger5/lessThanEqualsInteger5")
    check("builtin/semantics/lessThanInteger/lessThanInteger1/lessThanInteger1")
    check("builtin/semantics/lessThanInteger/lessThanInteger2/lessThanInteger2")
    check("builtin/semantics/lessThanInteger/lessThanInteger3/lessThanInteger3")
    check("builtin/semantics/lessThanInteger/lessThanInteger4/lessThanInteger4")
    check("builtin/semantics/lessThanInteger/lessThanInteger5/lessThanInteger5")
    check("builtin/semantics/listData/listData")
    check("builtin/semantics/listOfList/listOfList")
    check("builtin/semantics/listOfPair/listOfPair")
    check("builtin/semantics/mapData/mapData")
    check("builtin/semantics/mkCons/divideInteger/divideInteger")
    check("builtin/semantics/mkCons/mkCons-fail/mkCons-fail")
    check("builtin/semantics/mkCons/mkCons1/mkCons1")
    check("builtin/semantics/mkCons/mkCons2/mkCons2")
    check("builtin/semantics/mkNilData/mkNilData")
    check("builtin/semantics/mkNilPairData/mkNilPairData")
    check("builtin/semantics/mkPairData/mkPairData")
    check("builtin/semantics/modInteger/modInteger-neg-neg/modInteger-neg-neg")
    check("builtin/semantics/modInteger/modInteger-neg-pos/modInteger-neg-pos")
    check("builtin/semantics/modInteger/modInteger-pos-neg/modInteger-pos-neg")
    check("builtin/semantics/modInteger/modInteger-pos-pos/modInteger-pos-pos")
    check("builtin/semantics/modInteger/modInteger-zero/modInteger-zero")
    check("builtin/semantics/modInteger/modInteger1/modInteger1")
    check("builtin/semantics/multiplyInteger/multiplyInteger1/multiplyInteger1")
    check("builtin/semantics/multiplyInteger/multiplyInteger2/multiplyInteger2")
    check("builtin/semantics/multiplyInteger/multiplyInteger3/multiplyInteger3")
    check("builtin/semantics/multiplyInteger/multiplyInteger4/multiplyInteger4")
    check("builtin/semantics/multiplyInteger/multiplyInteger5/multiplyInteger5")
    check("builtin/semantics/multiplyInteger/multiplyInteger6/multiplyInteger6")
    check("builtin/semantics/nullList/nullList")
    check("builtin/semantics/nullList2/nullList2")
    check("builtin/semantics/pairOfPairAndList/pairOfPairAndList")
    check("builtin/semantics/quotientInteger/quotientInteger-neg-neg/quotientInteger-neg-neg")
    check("builtin/semantics/quotientInteger/quotientInteger-neg-pos/quotientInteger-neg-pos")
    check("builtin/semantics/quotientInteger/quotientInteger-pos-neg/quotientInteger-pos-neg")
    check("builtin/semantics/quotientInteger/quotientInteger-pos-pos/quotientInteger-pos-pos")
    check("builtin/semantics/quotientInteger/quotientInteger-zero/quotientInteger-zero")
    check("builtin/semantics/quotientInteger/quotientInteger1/quotientInteger1")
    check("builtin/semantics/remainderInteger/remainderInteger-neg-neg/remainderInteger-neg-neg")
    check("builtin/semantics/remainderInteger/remainderInteger-neg-pos/remainderInteger-neg-pos")
    check("builtin/semantics/remainderInteger/remainderInteger-pos-neg/remainderInteger-pos-neg")
    check("builtin/semantics/remainderInteger/remainderInteger-pos-pos/remainderInteger-pos-pos")
    check("builtin/semantics/remainderInteger/remainderInteger-zero/remainderInteger-zero")
    check("builtin/semantics/remainderInteger/remainderInteger1/remainderInteger1")
    check("builtin/semantics/sha2_256/sha2_256-empty/sha2_256-empty")
    check("builtin/semantics/sha2_256/sha2_256-length-200/sha2_256-length-200")
    check("builtin/semantics/sha3_256/sha3_256-empty/sha3_256-empty")
    check("builtin/semantics/sha3_256/sha3_256-length-200/sha3_256-length-200")
    check("builtin/semantics/sliceByteString/sliceByteString1/sliceByteString1")
    check("builtin/semantics/sliceByteString/sliceByteString2/sliceByteString2")
    check("builtin/semantics/sliceByteString/sliceByteString3/sliceByteString3")
    check("builtin/semantics/sliceByteString/sliceByteString4/sliceByteString4")
    check("builtin/semantics/sliceByteString/sliceByteString5/sliceByteString5")
    check("builtin/semantics/sndPairOfPairAndList/sndPairOfPairAndList")
    check("builtin/semantics/subtractInteger-non-iter/subtractInteger-non-iter")
    check("builtin/semantics/subtractInteger/subtractInteger1/subtractInteger1")
    check("builtin/semantics/subtractInteger/subtractInteger2/subtractInteger2")
    check("builtin/semantics/subtractInteger/subtractInteger3/subtractInteger3")
    check("builtin/semantics/subtractInteger/subtractInteger4/subtractInteger4")
    check("builtin/semantics/tailList/tailList-partial/tailList-partial")
    check("builtin/semantics/tailList/tailList1/tailList1")
    check("builtin/semantics/trace/trace")
    check("builtin/semantics/unBData/unBData-fail/unBData-fail")
    check("builtin/semantics/unBData/unBData1/unBData1")
    check("builtin/semantics/unConstrData/unConstrData-fail/unConstrData-fail")
    check("builtin/semantics/unConstrData/unConstrData1/unConstrData1")
    check("builtin/semantics/unIData/unIData-fail/unIData-fail")
    check("builtin/semantics/unIData/unIData1/unIData1")
    check("builtin/semantics/unListData/unListData-fail/unListData-fail")
    check("builtin/semantics/unListData/unListData1/unListData1")
    check("builtin/semantics/unMapData/unMapData-fail/unMapData-fail")
    check("builtin/semantics/unMapData/unMapData1/unMapData1")
    check("builtin/semantics/verifyEcdsaSecp256k1Signature/invalid-key/invalid-key")
    check("builtin/semantics/verifyEcdsaSecp256k1Signature/long-key/long-key")
    check("builtin/semantics/verifyEcdsaSecp256k1Signature/long-msg/long-msg")
    check("builtin/semantics/verifyEcdsaSecp256k1Signature/long-sig/long-sig")
    check("builtin/semantics/verifyEcdsaSecp256k1Signature/short-key/short-key")
    check("builtin/semantics/verifyEcdsaSecp256k1Signature/short-msg/short-msg")
    check("builtin/semantics/verifyEcdsaSecp256k1Signature/short-sig/short-sig")
    check("builtin/semantics/verifyEd25519Signature/long-key/long-key")
    check("builtin/semantics/verifyEd25519Signature/long-sig/long-sig")
    check("builtin/semantics/verifyEd25519Signature/short-key/short-key")
    check("builtin/semantics/verifyEd25519Signature/short-sig/short-sig")
    check("builtin/semantics/verifyEd25519Signature/test01/test01")
    check("builtin/semantics/verifyEd25519Signature/test02/test02")
    check("builtin/semantics/verifyEd25519Signature/test03/test03")
    check("builtin/semantics/verifyEd25519Signature/test04/test04")
    check("builtin/semantics/verifyEd25519Signature/test05/test05")
    check("builtin/semantics/verifyEd25519Signature/test06/test06")
    check("builtin/semantics/verifyEd25519Signature/test07/test07")
    check("builtin/semantics/verifyEd25519Signature/test08/test08")
    check("builtin/semantics/verifyEd25519Signature/test09/test09")
    check("builtin/semantics/verifyEd25519Signature/test10/test10")
    check("builtin/semantics/verifyEd25519Signature/test11/test11")
    check("builtin/semantics/verifyEd25519Signature/test12/test12")
    check("builtin/semantics/verifyEd25519Signature/test13/test13")
    check("builtin/semantics/verifyEd25519Signature/test14/test14")
    check("builtin/semantics/verifyEd25519Signature/test15/test15")
    check("builtin/semantics/verifyEd25519Signature/test16/test16")
    check("builtin/semantics/verifyEd25519Signature/test17/test17")
    check("builtin/semantics/verifyEd25519Signature/test18/test18")
    check("builtin/semantics/verifyEd25519Signature/test19/test19")
    check("builtin/semantics/verifyEd25519Signature/test20/test20")
    check("builtin/semantics/verifyEd25519Signature/test21/test21")
    check("builtin/semantics/verifyEd25519Signature/test22/test22")
    check("builtin/semantics/verifyEd25519Signature/test23/test23")
    check("builtin/semantics/verifyEd25519Signature/test24/test24")
    check("builtin/semantics/verifyEd25519Signature/test25/test25")
    check("builtin/semantics/verifyEd25519Signature/test26/test26")
    check("builtin/semantics/verifyEd25519Signature/test27/test27")
    check("builtin/semantics/verifyEd25519Signature/test28/test28")
    check("builtin/semantics/verifyEd25519Signature/test29/test29")
    check("builtin/semantics/verifyEd25519Signature/test30/test30")
    check("builtin/semantics/verifyEd25519Signature/test31/test31")
    check("builtin/semantics/verifySchnorrSecp256k1Signature/long-key/long-key")
    check("builtin/semantics/verifySchnorrSecp256k1Signature/long-sig/long-sig")
    check("builtin/semantics/verifySchnorrSecp256k1Signature/short-key/short-key")
    check("builtin/semantics/verifySchnorrSecp256k1Signature/short-sig/short-sig")
    check("example/ApplyAdd1/ApplyAdd1")
    check("example/ApplyAdd2/ApplyAdd2")
    check("example/churchSucc/churchSucc")
    check("example/churchZero/churchZero")
    check("example/DivideByZero/DivideByZero")
    check("example/DivideByZeroDrop/DivideByZeroDrop")
    check("example/even2/even2")
    check("example/even3/even3")
    check("example/evenList/evenList")
    check("example/factorial/factorial")
    check("example/fibonacci/fibonacci")
    check("example/force-lam/force-lam")
    check("example/IfIntegers/IfIntegers")
    check("example/NatRoundTrip/NatRoundTrip")
    check("example/overapplication/overapplication")
    check("example/ScottListSum/ScottListSum")
    check("example/succInteger/succInteger")
    check("term/app/app-1/app-1")
    check("term/app/app-2/app-2")
    check("term/app/app-3/app-3")
    check("term/app/app-4/app-4")
    check("term/app/app-5/app-5")
    check("term/app/app-6/app-6")
    check("term/app/app-7/app-7")
    check("term/app/app-8/app-8")
    check("term/app/app-9/app-9")
    check("term/argExpected/argExpected")
    check("term/case/case-1/case-1")
    check("term/case/case-2/case-2")
    check("term/case/case-3/case-3")
    check("term/case/case-4/case-4")
    check("term/case/case-5/case-5")
    check("term/case/case-6/case-6")
    check("term/case/case-7/case-7")
    check("term/case/case-8/case-8")
    check("term/case/case-9/case-9")
    check("term/closure/closure")
    check("term/constr/constr-1/constr-1")
    check("term/constr/constr-2/constr-2")
    check("term/constr/constr-3/constr-3")
    check("term/constr/constr-4/constr-4")
    check("term/constr/constr-5/constr-5")
    check("term/constr/constr-6/constr-6")
    check("term/delay/delay-error-1/delay-error-1")
    check("term/delay/delay-error-2/delay-error-2")
    check("term/delay/delay-lam/delay-lam")
    check("term/force/force-1/force-1")
    check("term/force/force-2/force-2")
    check("term/force/force-3/force-3")
    check("term/force/force-4/force-4")
    check("term/lam/lam-1/lam-1")
    check("term/lam/lam-2/lam-2")
    check("term/nonFunctionalApplication/nonFunctionalApplication")
    check("term/unlifting-sat/unlifting-sat")
    check("term/unlifting-unsat/unlifting-unsat")
    check("term/var/var")


    private type EvalFailure = "evaluation failure"
    private type ParseError = "parse error"
    private type Error = EvalFailure | ParseError
    private def parseExpected(code: String): Either[Error, Term] = {
        code match
            case "evaluation failure" => Left("evaluation failure")
            case "parse error"        => Left("parse error")
            case _ =>
                UplcParser().parseProgram(code) match
                    case Left(value) => fail(s"Unexpected parse error: $value")
                    case Right(program) =>
                        Right(DeBruijn.deBruijnTerm(program.term))

    }

    private def eval(code: String): Either[Error, Result] = {
        UplcParser().parseProgram(code) match
            case Right(program) =>
                Right(VM.evaluateDebug(program.term, MachineParams.defaultPlutusV3Params))
            case Left(_) =>
                Left("parse error")
    }

    protected def readFile(path: String): String

    protected def path = s"plutus-conformance/test-cases/uplc/evaluation"

    private val BudgetRegex = """\(\{cpu:\s(\d+)\n\|\smem:\s(\d+)\}\)""".r

    protected def check(name: String): Unit =
        test(name) {
            val code = readFile(s"$path/$name.uplc")
            val expected = readFile(s"$path/$name.uplc.expected")
            val expectedBudget =
                val budget = Try(readFile(s"$path/$name.uplc.budget.expected"))
                budget match
                    case Success(BudgetRegex(cpu, mem)) =>
                        Right(ExBudget.fromCpuAndMemory(cpu.toInt, mem.toInt))
                    case Success("parse error") => Left("parse error")
                    case Success("evaluation failure") => Left("evaluation failure")
                    case Failure(_) => Left("no file")
                    case _ => fail(s"Unexpected budget format:\n$budget")
            
            // println(eval(code).show)
            (eval(code), parseExpected(expected), expectedBudget) match
                case (Right(Result.Success(actualTerm, budget, _, _)), Right(expectedTerm), expectedBudget) =>
                    assert(Term.alphaEq(actualTerm, expectedTerm), s"Expected $expectedTerm but got $actualTerm")
                    expectedBudget match
                        case Right(expectedBudget) =>
                            assert(budget == expectedBudget, s"Expected $expectedBudget but got $budget")
                        case Left("no file") => // ignore
                        case Left(e) => fail(s"Expected $e but got $budget")
                case (Right(Result.Failure(actualTerm, _, _, _)), Left("evaluation failure"), Left("evaluation failure")) =>
                    assert(true)
                case (Left(e1), Left(e2), Left(_)) => assert(e1 == e2)
                case (a, b, c)               => fail(s"Expected $b but got $a and budget $c")
        }